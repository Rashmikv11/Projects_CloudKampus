#include <iostream>
#include <vector>
#include <string>
#include <memory>
#include <unordered_map>
#include <mqueue.h>
#include <cstring>
#include <cerrno>

// Base class for Inventory Items
class InventoryItem {
public:
    virtual void display() const = 0; // Pure virtual function for polymorphism
    virtual ~InventoryItem() = default;
};

// Derived class for Raw Material
class RawMaterial : public InventoryItem {
    std::string name;
    int quantity;
public:
    RawMaterial(const std::string& name, int quantity) : name(name), quantity(quantity) {}
    void display() const override {
        std::cout << "Raw Material: " << name << ", Quantity: " << quantity << std::endl;
    }
};

// Derived class for Finished Product
class FinishedProduct : public InventoryItem {
    std::string name;
    int quantity;
    double price;
public:
    FinishedProduct(const std::string& name, int quantity, double price) : name(name), quantity(quantity), price(price) {}
    void display() const override {
        std::cout << "Finished Product: " << name << ", Quantity: " << quantity << ", Price: $" << price << std::endl;
    }
};

// Department class
class Department {
    std::string name;
    std::vector<std::unique_ptr<InventoryItem>> items;
public:
    Department(const std::string& name) : name(name) {}
    void addItem(std::unique_ptr<InventoryItem> item) {
        items.push_back(std::move(item));
    }
    void displayItems() const {
        std::cout << "Department: " << name << std::endl;
        for (const auto& item : items) {
            item->display();
        }
    }
};

// Inventory System class
class InventorySystem {
    std::unordered_map<std::string, Department> departments;
public:
    void addDepartment(const std::string& name) {
        departments.emplace(name, Department(name));
    }
    Department& getDepartment(const std::string& name) {
        return departments.at(name);
    }
    void displayAllDepartments() const {
        for (const auto& pair : departments) {
            pair.second.displayItems();
        }
    }
};

// IPC functions
void sendMessage(const std::string& queueName, const std::string& message) {
    mqd_t mq = mq_open(queueName.c_str(), O_WRONLY | O_CREAT, 0644, nullptr);
    if (mq == -1) {
        std::cerr << "Error opening message queue: " << strerror(errno) << std::endl;
        return;
    }
    if (mq_send(mq, message.c_str(), message.size(), 0) == -1) {
        std::cerr << "Error sending message: " << strerror(errno) << std::endl;
    }
    mq_close(mq);
}

std::string receiveMessage(const std::string& queueName) {
    mqd_t mq = mq_open(queueName.c_str(), O_RDONLY | O_CREAT, 0644, nullptr);
    if (mq == -1) {
        std::cerr << "Error opening message queue: " << strerror(errno) << std::endl;
        return "";
    }
    char buffer[1024];
    ssize_t bytesRead = mq_receive(mq, buffer, sizeof(buffer), nullptr);
    if (bytesRead == -1) {
        std::cerr << "Error receiving message: " << strerror(errno) << std::endl;
        return "";
    }
    mq_close(mq);
    return std::string(buffer, bytesRead);
}

// Exception handling example
void exampleFunction() {
    try {
        // Code that might throw an exception
        throw std::runtime_error("An error occurred");
    } catch (const std::exception& e) {
        std::cerr << "Exception caught: " << e.what() << std::endl;
    }
}

int main() {
    InventorySystem system;
    system.addDepartment("Manufacturing");
    system.addDepartment("Sales");

    auto& manufacturing = system.getDepartment("Manufacturing");
    manufacturing.addItem(std::make_unique<RawMaterial>("Steel", 100));
    manufacturing.addItem(std::make_unique<RawMaterial>("Plastic", 200));

    auto& sales = system.getDepartment("Sales");
    sales.addItem(std::make_unique<FinishedProduct>("Widget", 50, 19.99));
    sales.addItem(std::make_unique<FinishedProduct>("Gadget", 30, 29.99));

    system.displayAllDepartments();

    sendMessage("/inventory_queue", "New inventory item added");
    std::string message = receiveMessage("/inventory_queue");
    std::cout << "Received message: " << message << std::endl;

    exampleFunction();

    return 0;
}
