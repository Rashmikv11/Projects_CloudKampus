#include <iostream>
#include <queue>
#include <vector>
#include <thread>
#include <chrono>
#include <mutex>
#include <condition_variable>

enum class AlarmType {
    FIRE,
    SECURITY_BREACH,
    LOW_BATTERY
};

struct Alarm {
    AlarmType type;
    int priority;
    std::string message;
};

bool operator<(const Alarm& a1, const Alarm& a2) {
    return a1.priority < a2.priority; // Higher priority value means higher priority
}

std::priority_queue<Alarm> alarmQueue;
std::mutex queueMutex;
std::condition_variable cv;

void fireISR() {
    std::this_thread::sleep_for(std::chrono::seconds(1)); // Simulate delay
    std::lock_guard<std::mutex> lock(queueMutex);
    alarmQueue.push({AlarmType::FIRE, 3, "Fire detected!"});
    cv.notify_one();
}

void securityBreachISR() {
    std::this_thread::sleep_for(std::chrono::seconds(2)); // Simulate delay
    std::lock_guard<std::mutex> lock(queueMutex);
    alarmQueue.push({AlarmType::SECURITY_BREACH, 2, "Security breach detected!"});
    cv.notify_one();
}

void lowBatteryISR() {
    std::this_thread::sleep_for(std::chrono::seconds(3)); // Simulate delay
    std::lock_guard<std::mutex> lock(queueMutex);
    alarmQueue.push({AlarmType::LOW_BATTERY, 1, "Low battery warning!"});
    cv.notify_one();
}

void processAlarms() {
    while (true) {
        std::unique_lock<std::mutex> lock(queueMutex);
        cv.wait(lock, [] { return !alarmQueue.empty(); });

        Alarm alarm = alarmQueue.top();
        alarmQueue.pop();
        lock.unlock();

        std::cout << "Processing alarm: " << alarm.message << std::endl;
        std::this_thread::sleep_for(std::chrono::seconds(1)); // Simulate processing time
    }
}

void simulateAlarms() {
    std::thread fireThread(fireISR);
    std::thread securityThread(securityBreachISR);
    std::thread batteryThread(lowBatteryISR);

    fireThread.join();
    securityThread.join();
    batteryThread.join();
}

int main() {
    std::thread alarmProcessor(processAlarms);
    simulateAlarms();

    alarmProcessor.join();
    return 0;
}
